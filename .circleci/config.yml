version: 2
machine:
  services:
    - docker
    - mysql

jobs:
  test:
    docker:
      - image: circleci/ruby:2.5.0-browsers
    steps:
      - checkout
      - restore_cache:
          keys:
            - gem-{{ arch }}-{{ checksum "Gemfile.lock" }}
      - run: |
          bundle install --path vendor/bundle
      - save_cache:
          key: gem-{{ arch }}-{{ checksum "Gemfile.lock" }}-{{ .Revision }}
          paths:
            - vendor/bundle
      - run: |
          bundle exec rspec

  deploy_branch:
    docker:
      - image: docker:latest
    steps:
      - setup_remote_docker
      - checkout
      - restore_cache:
          keys:
            - docker--{{ arch }}-{{ .Branch }}
      - run: |
          apk add --no-cache pigz
      - run:
          name: 'Load from cache if possible'
          command: |
            if test -r image.tar.gz;
            then
              echo "Loading from image.tar.gz"
              docker load -qi image.tar.gz
            else
              echo "missing image.tar.gz, continuing with build"
            fi

            docker images -a
      - run:
          name: 'Build docker image'
          command: |
            docker build --cache-from="$(docker images -a -q)" -t oleville/voting:${CIRCLE_SHA1} .
      - run: |
          name: "Tag and deploy to to docker.io"
          command: |
            docker tag oleville/voting:${CIRCLE_SHA1} oleville/voting:${CIRCLE_BRANCH}
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
            docker push oleville/voting:${CIRCLE_BRANCH}
      - run:
          name: 'Dump image to cachable .tar.gz file'
          command: |
            docker save oleville/voting:${CIRCLE_SHA1} | pigz -9c > image.tar.gz
      - save_cache:
          key: docker--{{ arch }}-{{ .Branch }}-{{ checksum "image.tar.gz" }}
          paths:
            - image.tar.gz

  deploy_latest:
    docker:
      - image: docker:latest
    steps:
      - setup_remote_docker
      - checkout
      - restore_cache:
          keys:
            - docker--{{ arch }}-{{ .Branch }}
      - run: |
          apk add --no-cache pigz
      - run:
          name: 'Load from cache if possible'
          command: |
            if test -r image.tar.gz;
            then
              echo "Loading from image.tar.gz"
              docker load -qi image.tar.gz
            else
              echo "missing image.tar.gz, continuing with build"
            fi

            docker images -a
      - run:
          name: 'Build docker image'
          command: |
            docker build --cache-from="$(docker images -a -q)" -t oleville/voting:${CIRCLE_SHA1} .
      - run: |
          name: "Tag and deploy to docker.io"
          command: |
            docker tag oleville/voting:${CIRCLE_SHA1} oleville/voting:latest
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
            docker push oleville/voting:latest
      - run:
          name: 'Dump image to cachable .tar.gz file'
          command: |
            docker save oleville/voting:${CIRCLE_SHA1} | pigz -9c > image.tar.gz
      - save_cache:
          key: docker--{{ arch }}-{{ .Branch }}-{{ checksum "image.tar.gz" }}
          paths:
            - image.tar.gz

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - test
      - deploy_branch:
          requires: [test]
          filters:
            branches:
              ignore: [master]
      - deploy_latest:
          requires: [test]
          filters:
            branches:
              only:
                - master
